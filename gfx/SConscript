import os
import subprocess
import sys

Import("env")
env = env.Clone()

# install pre-made graphics
pre = [env.Glob("pre/*.pdf"), env.Glob("pre/*.png")]
env.Install(env["BUILD_DIR"], pre)

# set output directory
env.Append(PDFLATEXFLAGS="--output-directory={}".format(env["BUILD_DIR"]))

# search for Python scripts
pys = env.Glob("py/*.py")
helper_pys = env.Dir("py", "helper")
pdfs = []
pgfs = []

# home or Documents directory
home_dir = (os.environ["HOME"] if sys.platform.startswith("linux") else
            os.path.join(os.environ["HOMEDRIVE"], os.environ["HOMEPATH"], "Documents"))

# set environment variables
py_env = env.Clone()
py_env["ENV"]["BUILD_DIR"]       = env["BUILD_DIR"].abspath

for py in pys:
  # determine number of generated images by script
  name = os.path.splitext(py.name)[0]
  
  with open(py.abspath, "r") as f: py_code = f.readlines()
  pdf_count = 1
  
  for line in py_code:
    if "number of output figures" in line.lower():
      number = line.split()[-1]
      if len(number.strip("0123456789")) == 0: pdf_count = int(number)
      break
  
  # generate list of *.pdf files
  if name == "ornament":
    cur_pdfs = [os.path.join(env["BUILD_DIR"].abspath, "ornament.pdf")]
  else:
    cur_pdfs = [os.path.join(env["BUILD_DIR"].abspath, "{}_{}.pdf".format(name, i))
                for i in range(1, pdf_count + 1)]
  
  # generate *.pdf files
  py_env.Command(cur_pdfs, py, "python3 $SOURCE")
  pdfs.extend(cur_pdfs)

  pgfs.extend([x[:-4] + ".pgf" for x in cur_pdfs])

# *.pdf files depend on helper scripts
env.Depends(pdfs, helper_pys)

# don't delete PDFs before calling Python scripts
env.Precious(pdfs)

# clean *.xz data files as well
env.Clean(pdfs, [pgfs, env.Glob(os.path.join(env["BUILD_DIR"].abspath, "*.xz"))])

Return("pdfs")
